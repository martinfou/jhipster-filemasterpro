package com.compica.filemasterpro.domain;

import static com.compica.filemasterpro.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class FileAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileAllPropertiesEquals(File expected, File actual) {
        assertFileAutoGeneratedPropertiesEquals(expected, actual);
        assertFileAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileAllUpdatablePropertiesEquals(File expected, File actual) {
        assertFileUpdatableFieldsEquals(expected, actual);
        assertFileUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileAutoGeneratedPropertiesEquals(File expected, File actual) {
        assertThat(expected)
            .as("Verify File auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileUpdatableFieldsEquals(File expected, File actual) {
        assertThat(expected)
            .as("Verify File relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getFileDate()).as("check fileDate").isEqualTo(actual.getFileDate()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getHash()).as("check hash").isEqualTo(actual.getHash()))
            .satisfies(e -> assertThat(e.getFileSize()).as("check fileSize").isEqualTo(actual.getFileSize()))
            .satisfies(e -> assertThat(e.getPath()).as("check path").isEqualTo(actual.getPath()))
            .satisfies(e -> assertThat(e.getRawFile()).as("check rawFile").isEqualTo(actual.getRawFile()))
            .satisfies(e ->
                assertThat(e.getRawFileContentType()).as("check rawFile contenty type").isEqualTo(actual.getRawFileContentType())
            )
            .satisfies(e -> assertThat(e.getUploadedDate()).as("check uploadedDate").isEqualTo(actual.getUploadedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileUpdatableRelationshipsEquals(File expected, File actual) {
        assertThat(expected)
            .as("Verify File relationships")
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()))
            .satisfies(e -> assertThat(e.getVendor()).as("check vendor").isEqualTo(actual.getVendor()));
    }
}
